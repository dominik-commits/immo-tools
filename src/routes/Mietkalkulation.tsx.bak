// src/routes/Mietkalkulation.tsx
import React from "react";
import { motion } from "framer-motion";
import {
  Calculator, Gauge, Banknote, Sigma, TrendingUp, Info, RefreshCw, Download, Upload
} from "lucide-react";
import {
  ResponsiveContainer, BarChart, Bar, XAxis, YAxis, Tooltip as RTooltip,
  LineChart, Line, CartesianGrid, Legend, LabelList
} from "recharts";
import PlanGuard from "@/components/PlanGuard";
import { Link } from "react-router-dom";

/** ---------------- Kleine UI-Atoms (einheitlich) ---------------- */

function Card({ children, className = "" }: { children: React.ReactNode; className?: string }) {
  return <div className={`rounded-2xl border p-4 bg-card ${className}`}>{children}</div>;
}
function Badge({ icon, text, hint }: { icon: React.ReactNode; text: string; hint?: string }) {
  return (
    <span className="inline-flex items-center gap-1.5 px-2 py-1 rounded-full border text-[11px] text-foreground bg-card shadow-sm" title={hint}>
      {icon} {text}
    </span>
  );
}
function InfoBubble({ text }: { text: string }) {
  return (
    <span className="inline-flex items-center ml-2 align-middle" title={text} aria-label={text}>
      <Info className="h-4 w-4 text-gray-400" />
    </span>
  );
}
function NumberField({
  label, value, onChange, step = 1, min, max, suffix
}: {
  label: string; value: number; onChange: (n: number) => void; step?: number; min?: number; max?: number; suffix?: string;
}) {
  return (
    <label className="text-sm grid gap-1">
      <span className="text-muted-foreground">{label}</span>
      <div className="flex items-center gap-2">
        <input
          className="w-full rounded-xl border px-3 py-2"
          type="number" step={step} min={min} max={max}
          value={Number.isFinite(value) ? value : 0}
          onChange={(e) => onChange(e.target.value === "" ? 0 : Number(e.target.value))}
        />
        {suffix && <span className="text-xs text-muted-foreground">{suffix}</span>}
      </div>
    </label>
  );
}
function PercentField({
  label, value, onChange, step = 0.001, min = 0, max = 0.95
}: { label: string; value: number; onChange: (n: number) => void; step?: number; min?: number; max?: number }) {
  return (
    <label className="text-sm grid gap-1">
      <span className="text-muted-foreground">{label}</span>
      <div className="flex items-center gap-3">
        <input type="range" min={min} max={max} step={step} value={value} onChange={(e) => onChange(Number(e.target.value))} className="w-full" />
        <span className="w-24 text-right tabular-nums">{pct(value)}</span>
      </div>
    </label>
  );
}
function ScoreDonut({ scorePct, scoreColor, label, size = 42 }: { scorePct: number; scoreColor: string; label: "BUY" | "CHECK" | "NO"; size?: number }) {
  return (
    <div className="relative" style={{ width: size * 2, height: size * 2 }}>
      <svg className="absolute inset-0" viewBox="0 0 100 100" aria-label={`Score ${scorePct}%`}>
        <defs>
          <linearGradient id="gradScoreRent" x1="0" y1="0" x2="1" y2="1">
            <stop offset="0%" stopColor={scoreColor} />
            <stop offset="100%" stopColor="#60a5fa" />
          </linearGradient>
        </defs>
        <circle cx="50" cy="50" r="40" fill="none" stroke="#e5e7eb" strokeWidth="12" />
        <circle
          cx="50" cy="50" r="40" fill="none" stroke="url(#gradScoreRent)"
          strokeWidth="12" strokeDasharray={`${scorePct * 2.513}, 251.3`}
          strokeLinecap="round" transform="rotate(-90 50 50)"
        />
      </svg>
      <div className="absolute inset-0 grid place-items-center text-center">
        <div>
          <div className="text-xl font-bold leading-5" style={{ color: scoreColor }}>{scorePct}%</div>
          <div className="text-[10px] text-muted-foreground">„{label}“</div>
        </div>
      </div>
    </div>
  );
}
function UpgradeBanner() {
  return (
    <div className="rounded-xl border p-3 bg-amber-50 text-amber-800 text-sm flex items-center justify-between">
      <span>Mehr Module & Funktionen in <b>IMMO Analyzer Pro</b>.</span>
      <Link to="/preise" className="px-3 py-1 rounded-lg border bg-white hover:bg-amber-100 transition">Jetzt upgraden</Link>
    </div>
  );
}

/** ---------------- Utils ---------------- */
function eur(v: number) { return v.toLocaleString("de-DE", { style: "currency", currency: "EUR", maximumFractionDigits: 0 }); }
function pct(x: number) { return (x * 100).toFixed(1).replace(".0", "") + " %"; }
function signedPct(x: number) { const v = Math.round(x * 100); return (x > 0 ? "+" : "") + v + "%"; }
function clamp(n: number, a: number, b: number) { return Math.min(b, Math.max(a, n)); }

/** ---------------- Seite (Basic erlaubt) ---------------- */

export default function Mietkalkulator() {
  return (
    <PlanGuard required="basic">
      <PageInner />
    </PlanGuard>
  );
}

function PageInner() {
  const DRAFT_KEY = "mietkalkulator.v3";

  // Eingaben
  const [flaecheM2, setFlaecheM2] = React.useState(68);
  const [mieteProM2Monat, setMieteProM2Monat] = React.useState(12.5);
  const [umlagefaehigProM2, setUmlagefaehigProM2] = React.useState(2.8); // €/m²/Monat (Betriebskosten, umlagefähig)
  const [nichtUmlagefaehigPct, setNichtUmlagefaehigPct] = React.useState(0.05); // % von Bruttokaltmiete (Instandhaltung, Vv etc.)
  const [leerstandPct, setLeerstandPct] = React.useState(0.06);
  const [mietsteigerungPct, setMietsteigerungPct] = React.useState(0.02);
  const [kostensteigerungPct, setKostensteigerungPct] = React.useState(0.02);

  // Laden
  React.useEffect(() => {
    try {
      const raw = localStorage.getItem(DRAFT_KEY);
      if (!raw) return;
      const d = JSON.parse(raw);
      setFlaecheM2(d.flaecheM2 ?? 68);
      setMieteProM2Monat(d.mieteProM2Monat ?? 12.5);
      setUmlagefaehigProM2(d.umlagefaehigProM2 ?? 2.8);
      setNichtUmlagefaehigPct(d.nichtUmlagefaehigPct ?? 0.05);
      setLeerstandPct(d.leerstandPct ?? 0.06);
      setMietsteigerungPct(d.mietsteigerungPct ?? 0.02);
      setKostensteigerungPct(d.kostensteigerungPct ?? 0.02);
    } catch {}
  }, []);
  // Speichern
  React.useEffect(() => {
    const data = {
      flaecheM2, mieteProM2Monat, umlagefaehigProM2, nichtUmlagefaehigPct,
      leerstandPct, mietsteigerungPct, kostensteigerungPct
    };
    try { localStorage.setItem(DRAFT_KEY, JSON.stringify(data)); } catch {}
  }, [flaecheM2, mieteProM2Monat, umlagefaehigProM2, nichtUmlagefaehigPct, leerstandPct, mietsteigerungPct, kostensteigerungPct]);

  /** ---------------- Ableitungen ---------------- */
  const kalt = flaecheM2 * mieteProM2Monat;                  // € / Monat
  const bruttoKalt = kalt;                                   // Alias
  const umlage = flaecheM2 * umlagefaehigProM2;              // € / Monat
  const warm = bruttoKalt + umlage;                          // € / Monat
  const leerstandEuro = bruttoKalt * leerstandPct;           // € / Monat (entgeht)
  const nichtUmlagefaehigEuro = bruttoKalt * nichtUmlagefaehigPct; // € / Monat
  const noiMonat = bruttoKalt * (1 - leerstandPct) - nichtUmlagefaehigEuro; // € / Monat (vereinfacht, ohne Finanzierung/Steuern)
  const noiYield = bruttoKalt > 0 ? clamp(noiMonat / bruttoKalt, -5, 5) : 0;

  // Heuristischer Score (rein UI): Warmmiete/Markt + Leerstand + Kosten
  const scoreRaw = clamp(
    0.75 * (1 - leerstandPct) + 0.25 * (1 - nichtUmlagefaehigPct) - 0.05 * Math.max(0, umlagefaehigProM2 - 3),
    0, 1
  );
  const scorePct = Math.round(scoreRaw * 100);
  const scoreColor = scoreRaw >= 0.7 ? "#16a34a" : scoreRaw >= 0.5 ? "#f59e0b" : "#ef4444";
  const scoreLabel: "BUY" | "CHECK" | "NO" = scoreRaw >= 0.7 ? "BUY" : scoreRaw >= 0.5 ? "CHECK" : "NO";

  // Projektion 10 Jahre (einfach: Miete/Kostenwachstum, Leerstand konstant)
  const projection = React.useMemo(() => {
    const years = 10;
    const data: { year: number; KaltmieteJahr: number; UmlageJahr: number; NOIJahr: number }[] = [];
    let cold = kalt * 12;
    let opUml = umlage * 12;
    let nonRec = nichtUmlagefaehigEuro * 12;
    for (let t = 1; t <= years; t++) {
      if (t > 1) {
        cold *= (1 + mietsteigerungPct);
        opUml *= (1 + kostensteigerungPct);
        nonRec *= (1 + kostensteigerungPct);
      }
      const eff = cold * (1 - leerstandPct);
      const noi = eff - nonRec;
      data.push({
        year: t,
        KaltmieteJahr: Math.round(cold),
        UmlageJahr: Math.round(opUml),
        NOIJahr: Math.round(noi),
      });
    }
    return data;
  }, [kalt, umlage, nichtUmlagefaehigEuro, mietsteigerungPct, kostensteigerungPct, leerstandPct]);

  // Chart: Monatsmix
  const mixData = [{ name: "Monat 1", Kalt: Math.round(kalt), Umlage: Math.round(umlage), NOI: Math.round(noiMonat) }];

  /** ---------------- Export/Import ---------------- */
  function exportJson() {
    const payload = {
      flaecheM2, mieteProM2Monat, umlagefaehigProM2, nichtUmlagefaehigPct,
      leerstandPct, mietsteigerungPct, kostensteigerungPct
    };
    const blob = new Blob([JSON.stringify(payload, null, 2)], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a"); a.href = url; a.download = "mietkalkulator.json"; a.click(); URL.revokeObjectURL(url);
  }
  function importJson(file: File) {
    const r = new FileReader();
    r.onload = () => {
      try {
        const d = JSON.parse(String(r.result));
        setFlaecheM2(num(d.flaecheM2, 68));
        setMieteProM2Monat(num(d.mieteProM2Monat, 12.5));
        setUmlagefaehigProM2(num(d.umlagefaehigProM2, 2.8));
        setNichtUmlagefaehigPct(num(d.nichtUmlagefaehigPct, 0.05));
        setLeerstandPct(num(d.leerstandPct, 0.06));
        setMietsteigerungPct(num(d.mietsteigerungPct, 0.02));
        setKostensteigerungPct(num(d.kostensteigerungPct, 0.02));
      } catch { alert("Ungültige Datei"); }
    };
    r.readAsText(file);
  }

  /** ---------------- Render ---------------- */
  return (
    <div className="bg-gradient-to-b from-gray-50 to-white min-h-screen">
      <div className="max-w-3xl mx-auto px-4 py-6 space-y-6 pb-40">
        {/* Upgrade-Banner (dezent) */}
        <UpgradeBanner />

        {/* Header */}
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="h-10 w-10 rounded-xl bg-gradient-to-br from-sky-400 to-indigo-400 text-white grid place-items-center shadow">
              <Calculator className="h-5 w-5" />
            </div>
            <div>
              <h2 className="text-xl font-semibold tracking-tight">Mietkalkulator</h2>
              <p className="text-muted-foreground text-sm">Warmmiete, Umlagen & NOI auf einen Blick – mit 10-Jahres-Projektion.</p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <button
              className="px-3 py-2 rounded-lg text-sm inline-flex items-center gap-2 bg-card/80 border shadow-sm hover:shadow transition"
              onClick={() => {
                setFlaecheM2(68); setMieteProM2Monat(12.5); setUmlagefaehigProM2(2.8);
                setNichtUmlagefaehigPct(0.05); setLeerstandPct(0.06);
                setMietsteigerungPct(0.02); setKostensteigerungPct(0.02);
              }}
            >
              <RefreshCw className="h-4 w-4" /> Beispiel
            </button>
            <button className="px-3 py-2 rounded-lg text-sm inline-flex items-center gap-2 bg-card/80 border shadow-sm hover:shadow transition" onClick={exportJson}>
              <Download className="h-4 w-4" /> Export
            </button>
            <label className="px-3 py-2 rounded-lg text-sm inline-flex items-center gap-2 bg-card/80 border shadow-sm hover:shadow transition cursor-pointer">
              <Upload className="h-4 w-4" /> Import
              <input type="file" className="hidden" accept="application/json" onChange={(e) => { const f = e.target.files?.[0]; if (f) importJson(f); }} />
            </label>
          </div>
        </div>

        {/* Eingaben */}
        <section className="space-y-4">
          <h2 className="text-lg font-semibold">Eingaben</h2>
          <Card>
            <div className="grid grid-cols-1 gap-3">
              <NumberField label="Wohnfläche" value={flaecheM2} onChange={setFlaecheM2} suffix="m²" />
              <NumberField label="Kaltmiete" value={mieteProM2Monat} onChange={setMieteProM2Monat} step={0.1} suffix="€/m²/Monat" />
              <NumberField label="Umlagefähige BK" value={umlagefaehigProM2} onChange={setUmlagefaehigProM2} step={0.1} suffix="€/m²/Monat" />
              <div className="flex items-center justify-between">
                <span className="text-sm text-muted-foreground">Nicht umlagefähige Kosten (Quote)</span>
                <InfoBubble text="Verwaltung, Instandhaltung etc.; geht zulasten NOI." />
              </div>
              <PercentField label="Nicht umlagefähig (%)" value={nichtUmlagefaehigPct} onChange={setNichtUmlagefaehigPct} step={0.001} min={0} max={0.2} />
              <div className="flex items-center justify-between">
                <span className="text-sm text-muted-foreground">Leerstand (Quote)</span>
                <InfoBubble text="Mietausfallquote durch Wechsel/Leerstand." />
              </div>
              <PercentField label="Leerstand (%)" value={leerstandPct} onChange={setLeerstandPct} step={0.001} min={0} max={0.3} />
            </div>
          </Card>

          <Card>
            <div className="grid grid-cols-1 gap-3">
              <div className="flex items-center justify-between">
                <span className="text-sm font-medium">Projektion (10 Jahre)</span>
                <span className="text-xs text-muted-foreground">Wachstumsannahmen</span>
              </div>
              <div className="grid grid-cols-1 gap-3">
                <PercentField label="Mietsteigerung p.a. (%)" value={mietsteigerungPct} onChange={setMietsteigerungPct} step={0.001} min={0} max={0.06} />
                <PercentField label="Kostensteigerung p.a. (%)" value={kostensteigerungPct} onChange={setKostensteigerungPct} step={0.001} min={0} max={0.06} />
              </div>
            </div>
          </Card>
        </section>

        {/* Mix-Chart Monat 1 */}
        <section className="space-y-2">
          <h2 className="text-lg font-semibold flex items-center gap-2"><TrendingUp className="h-5 w-5" /> Monatsmix</h2>
          <Card className="overflow-hidden">
            <div className="h-56">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart data={mixData} margin={{ top: 20, right: 20, left: 0, bottom: 8 }}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="name" />
                  <YAxis tickFormatter={(v: any) => v.toLocaleString("de-DE")} />
                  <RTooltip formatter={(v: any) => eur(v)} />
                  <Legend />
                  <Bar dataKey="Kalt" fill="#111827" radius={[10,10,0,0]}><LabelList dataKey="Kalt" position="top" formatter={(v: any) => eur(v)} /></Bar>
                  <Bar dataKey="Umlage" fill="#0ea5e9" radius={[10,10,0,0]}><LabelList dataKey="Umlage" position="top" formatter={(v: any) => eur(v)} /></Bar>
                  <Bar dataKey="NOI" fill="#16a34a" radius={[10,10,0,0]}><LabelList dataKey="NOI" position="top" formatter={(v: any) => eur(v)} /></Bar>
                </BarChart>
              </ResponsiveContainer>
            </div>
          </Card>
        </section>

        {/* Projektion */}
        <section className="space-y-2">
          <h2 className="text-lg font-semibold">Projektion (10 Jahre)</h2>
          <Card className="overflow-hidden">
            <div className="h-64">
              <ResponsiveContainer width="100%" height="100%">
                <LineChart data={projection} margin={{ top: 20, right: 20, left: 0, bottom: 8 }}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="year" />
                  <YAxis tickFormatter={(v: any) => v.toLocaleString("de-DE")} />
                  <RTooltip formatter={(v: any) => eur(v)} />
                  <Legend />
                  <Line type="monotone" dataKey="KaltmieteJahr" name="Kaltmiete p.a." stroke="#0ea5e9" strokeWidth={2} dot={false} />
                  <Line type="monotone" dataKey="UmlageJahr" name="Umlagen p.a." stroke="#6366f1" strokeWidth={2} dot={false} />
                  <Line type="monotone" dataKey="NOIJahr" name="NOI p.a." stroke="#16a34a" strokeWidth={2} dot={false} />
                </LineChart>
              </ResponsiveContainer>
            </div>
          </Card>
        </section>

        {/* Monatsrechnung */}
        <section className="space-y-2">
          <h2 className="text-lg font-semibold">Monatsrechnung (Jahr 1)</h2>
          <Card>
            <ul className="text-sm text-foreground space-y-1">
              <li>Kaltmiete (mtl.): <b>{eur(Math.round(kalt))}</b></li>
              <li>Umlagefähige BK (mtl.): <b>{eur(Math.round(umlage))}</b></li>
              <li>Warmmiete (mtl.): <b>{eur(Math.round(warm))}</b></li>
              <li>Leerstand (Abzug, mtl.): <b>−{eur(Math.round(leerstandEuro))}</b></li>
              <li>Nicht umlagefähig (mtl.): <b>−{eur(Math.round(nichtUmlagefaehigEuro))}</b></li>
              <li>= NOI (mtl., vereinfacht): <b>{eur(Math.round(noiMonat))}</b></li>
            </ul>
            <p className="text-xs text-muted-foreground mt-2">Hinweis: vereinfachtes Modell zur Mieteinnahmen-Kalkulation, ohne Steuern/Finanzierung.</p>
          </Card>
        </section>

        {/* Glossar – einheitlich unten */}
        <section className="space-y-2">
          <h2 className="text-lg font-semibold">Glossar</h2>
          <Card>
            <dl className="text-sm text-foreground space-y-1.5">
              <div><span className="font-medium">Bruttokaltmiete:</span> Kaltmiete ohne Heiz-/Warmwasserkosten, inkl. kalter Betriebskosten.</div>
              <div><span className="font-medium">Umlagefähige Kosten:</span> Betriebskosten, die laut BetrKV auf Mieter umlegbar sind.</div>
              <div><span className="font-medium">NOI (Net Operating Income):</span> Eff. Mietertrag abzüglich nicht umlagefähiger Kosten (vereinfacht).</div>
              <div><span className="font-medium">Leerstand:</span> Zeiträume ohne Vermietung bzw. Mietausfallquote.</div>
            </dl>
          </Card>
        </section>
      </div>

      {/* ---------- Sticky Ergebnis-Footer ---------- */}
      <div className="fixed bottom-0 left-0 right-0 z-20">
        <div className="mx-auto max-w-3xl px-4 pb-[env(safe-area-inset-bottom)]">
          <div className="mb-3 rounded-2xl border shadow-lg bg-card/90 backdrop-blur supports-[backdrop-filter]:bg-card/60">
            <div className="p-3 flex items-center justify-between gap-3">
              <div className="min-w-0">
                <div className="text-xs text-muted-foreground">Ergebnis <span className="text-[11px] text-gray-400">(Aktuell)</span></div>
                <div className="text-sm font-semibold truncate">
                  Entscheidung: {scoreRaw >= 0.7 ? "Kaufen (unter Vorbehalt)" : scoreRaw >= 0.5 ? "Weiter prüfen" : "Eher Nein"}
                </div>
                <div className="mt-1 flex flex-wrap items-center gap-2">
                  <Badge icon={<Banknote className="h-3.5 w-3.5" />} text={`${eur(Math.round(noiMonat))} NOI mtl.`} hint="NOI (Monat 1)" />
                  <Badge icon={<Gauge className="h-3.5 w-3.5" />} text={`NOI-Yield ${pct(noiYield)}`} hint="NOI / Bruttokaltmiete" />
                  <Badge icon={<Sigma className="h-3.5 w-3.5" />} text={`Leerstand ${pct(leerstandPct)}`} hint="Mietausfallquote" />
                </div>
              </div>
              <ScoreDonut scorePct={scorePct} scoreColor={scoreColor} label={scoreLabel} size={42} />
            </div>
            <div className="h-1.5 w-full rounded-b-2xl overflow-hidden bg-surface">
              <div
                className="h-full transition-all"
                style={{ width: `${Math.max(4, Math.min(100, scorePct))}%`, background: `linear-gradient(90deg, ${scoreColor}, #60a5fa)` }}
                aria-label={`Score ${scorePct}%`}
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

/** ---------------- kleine Helfer ---------------- */
function num(x: any, fb: number) { const v = Number(x); return Number.isFinite(v) ? v : fb; }