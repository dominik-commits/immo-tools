// src/routes/Compare.tsx
// Propora Compare (PRO) – Deals nebeneinander (ETW / MFH / Gewerbe)

import React from "react";
import { AnimatePresence, motion } from "framer-motion";
import {
  Plus, Copy, Trash2, Download, Upload, RefreshCw,
  Gauge, Banknote, TrendingUp, LineChart as LineIcon, Scale, Stars, Info, FileText, Target
} from "lucide-react";
import {
  ResponsiveContainer, CartesianGrid, XAxis, YAxis, Tooltip as RTooltip, Legend,
  BarChart, Bar, LabelList
} from "recharts";
import jsPDF from "jspdf";
import html2canvas from "html2canvas";
import PlanGuard from "@/components/PlanGuard";

/* ============================================================
   Vergleich – Deals nebeneinander (ETW / MFH / GEWERBE)
   + CSV-Export, PDF-Export
   ============================================================ */

type SzenarioTyp = "ETW" | "MFH" | "GEWERBE";

type Szenario = {
  id: string;
  name: string;
  typ: SzenarioTyp;
  color: string;
  kaufpreis: number;
  flaecheM2: number;
  mieteProM2Monat: number;
  leerstandPct: number;
  opexPctBrutto: number;
  financingOn: boolean;
  ltvPct: number;
  zinsPct: number;
  tilgungPct: number;
  capRateAssumed: number;
};

type ViewRow = {
  id: string;
  name: string;
  typ: SzenarioTyp;
  color: string;
  noiYear: number;
  noiYield: number;
  cashflowMonat: number;
  dscr: number | null;
  wertAusCap: number;
  valueGap: number;
  score: number;
  scoreLabel: "BUY"|"CHECK"|"NO";
};

/* ============================ Utils ============================ */
function eur(n: number) {
  return Number.isFinite(n)
    ? n.toLocaleString("de-DE", { style: "currency", currency: "EUR", maximumFractionDigits: 0 })
    : "–";
}
function pct(x: number) { return Number.isFinite(x) ? (x * 100).toFixed(1) + " %" : "–"; }
function clamp01(x: number) { return Math.max(0, Math.min(1, x)); }
function scale(x: number, a: number, b: number) { if (b === a) return 0; return clamp01((x - a) / (b - a)); }
function uid() { return Math.random().toString(36).slice(2, 10); }
function scoreLabelFrom(score: number): "BUY" | "CHECK" | "NO" {
  if (score >= 0.7) return "BUY";
  if (score >= 0.5) return "CHECK";
  return "NO";
}
function labelText(s: "BUY"|"CHECK"|"NO") {
  if (s === "BUY") return "Kaufen (unter Vorbehalt)";
  if (s === "CHECK") return "Weiter prüfen";
  return "Eher Nein";
}

/* Modell-Formeln (konsistent & leichtgewichtig) */
function calcViewRow(s: Szenario): ViewRow {
  const grossRentYear = s.flaecheM2 * s.mieteProM2Monat * 12;
  const effRentYear = grossRentYear * (1 - clamp01(s.leerstandPct));
  const opexYear = grossRentYear * clamp01(s.opexPctBrutto);
  const noiYear = effRentYear - opexYear;

  const loan = s.financingOn ? s.kaufpreis * clamp01(s.ltvPct) : 0;
  const annuityYear = s.financingOn ? loan * (s.zinsPct + s.tilgungPct) : 0;
  const dscr = s.financingOn && annuityYear > 0 ? noiYear / annuityYear : null;
  const cashflowMonat = (noiYear - annuityYear) / 12;

  const cap = Math.max(0.0001, s.capRateAssumed);
  const wertAusCap = noiYear / cap;
  const valueGap = Math.round(wertAusCap - s.kaufpreis);
  const noiYield = s.kaufpreis > 0 ? noiYear / s.kaufpreis : 0;

  const partYield = scale(noiYield, 0.045, 0.09);
  the const partDSCR = scale(dscr ?? 0, 1.2, 1.7);
  const partCF = scale(cashflowMonat, 0, 1200);
  const score = clamp01(partYield * 0.5 + partDSCR * 0.35 + partCF * 0.15);

  return {
    id: s.id,
    name: s.name,
    typ: s.typ,
    color: s.color,
    noiYear: Math.round(noiYear),
    noiYield,
    cashflowMonat: Math.round(cashflowMonat),
    dscr: dscr ? Number(dscr.toFixed(2)) : null,
    wertAusCap: Math.round(wertAusCap),
    valueGap,
    score,
    scoreLabel: scoreLabelFrom(score)
  };
}

/* ========================== Hauptkomponente ==================== */

export default function Compare() {
  return (
    <PlanGuard required="pro">
      <CompareInner />
    </PlanGuard>
  );
}

function CompareInner() {
  const [items, setItems] = React.useState<Szenario[]>(() => demoItems());
  const [selectedId, setSelectedId] = React.useState<string | null>(null);

  // Für PDF-Export: Bereich referenzieren (alles zwischen Header und Sticky-Footer)
  const printRef = React.useRef<HTMLDivElement>(null);

  const rows = React.useMemo(() => items.map(calcViewRow), [items]);
  const best = React.useMemo(() => {
    if (!rows.length) return null;
    return [...rows].sort((a, b) => b.score - a.score)[0];
  }, [rows]);

  // Export / Import
  function exportJson() {
    const blob = new Blob([JSON.stringify(items, null, 2)], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url; a.download = "vergleich-szenarien.json"; a.click(); URL.revokeObjectURL(url);
  }
  function importJson(file: File) {
    const r = new FileReader();
    r.onload = () => {
      try {
        const arr = JSON.parse(String(r.result));
        if (!Array.isArray(arr)) throw new Error("Invalid");
        const norm = arr.map((x: any) => normalizeSzenario(x));
        setItems(norm.length ? norm : demoItems());
      } catch { alert("Ungültige Datei"); }
    };
    r.readAsText(file);
  }

  // CSV-Export (kompakter KPI-Vergleich)
  function exportCSV() {
    const header = [
      "Name","Typ","Kaufpreis","Fläche_m2","Miete_m2_monat",
      "Leerstand_%","Opex_%_Brutto","Finanzierung","LTV_%","Zins_%","Tilgung_%","CapRate_%",
      "NOI_Jahr","NOI_Yield_%","Cashflow_monat","DSCR","Wert_NOI/Cap","ValueGap"
    ];
    const lines = [header.join(";")];

    for (const s of items) {
      const v = calcViewRow(s);
      lines.push([
        safe(s.name),
        s.typ,
        num0(s.kaufpreis),
        num0(s.flaecheM2),
        numDec(s.mieteProM2Monat,1),
        numDec(s.leerstandPct*100,1),
        numDec(s.opexPctBrutto*100,1),
        s.financingOn ? "Ja" : "Nein",
        numDec(s.ltvPct*100,1),
        numDec(s.zinsPct*100,2),
        numDec(s.tilgungPct*100,2),
        numDec(s.capRateAssumed*100,2),
        num0(v.noiYear),
        numDec(v.noiYield*100,2),
        num0(v.cashflowMonat),
        v.dscr ?? "",
        num0(v.wertAusCap),
        num0(v.valueGap)
      ].join(";"));
    }

    const blob = new Blob([lines.join("\n")], { type: "text/csv;charset=utf-8" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a"); a.href = url; a.download = "vergleich.csv"; a.click(); URL.revokeObjectURL(url);
  }

  // PDF-Export (mehrseitig, scharf)
  async function exportPDF() {
    if (!printRef.current) return;
    const node = printRef.current;
    const canvas = await html2canvas(node, { scale: 2, backgroundColor: "#ffffff" });
    const imgData = canvas.toDataURL("image/png");
    const pdf = new jsPDF({ unit: "pt", format: "a4" }); // 595 x 842

    const pageW = 595, pageH = 842, margin = 20;
    const imgW = pageW - margin * 2;
    const imgH = (canvas.height * imgW) / canvas.width;

    if (imgH <= pageH - margin * 2) {
      pdf.addImage(imgData, "PNG", margin, margin, imgW, imgH, undefined, "FAST");
    } else {
      // Mehrseitig in Scheiben schneiden
      let srcY = 0;
      const sliceHeight = ((pageH - margin * 2) * canvas.width) / imgW;

      while (srcY < canvas.height) {
        const sliceCanvas = document.createElement("canvas");
        sliceCanvas.width = canvas.width;
        sliceCanvas.height = Math.min(sliceHeight, canvas.height - srcY);
        const ctx = sliceCanvas.getContext("2d")!;
        ctx.drawImage(canvas, 0, srcY, canvas.width, sliceCanvas.height, 0, 0, canvas.width, sliceCanvas.height);
        const part = sliceCanvas.toDataURL("image/png");

        if (srcY > 0) pdf.addPage();
        const partH = (sliceCanvas.height * imgW) / canvas.width;
        pdf.addImage(part, "PNG", margin, margin, imgW, partH, undefined, "FAST");

        srcY += sliceHeight;
      }
    }
    pdf.save("vergleich.pdf");
  }

  function addItem() {
    const n = items.length + 1;
    setItems(list => [...list, {
      id: uid(),
      name: `Szenario ${n}`,
      typ: "ETW",
      color: pickColor(n),
      kaufpreis: 350000, flaecheM2: 70, mieteProM2Monat: 12,
      leerstandPct: 0.05, opexPctBrutto: 0.25,
      financingOn: true, ltvPct: 0.8, zinsPct: 0.039, tilgungPct: 0.02,
      capRateAssumed: 0.055
    }]);
  }
  function cloneItem(id: string) {
    const it = items.find(x => x.id === id);
    if (!it) return;
    const c = { ...it, id: uid(), name: it.name + " (Kopie)", color: pickColor(items.length + 1) };
    setItems(list => [...list, c]);
  }
  function deleteItem(id: string) {
    setItems(list => list.filter(x => x.id !== id));
    if (selectedId === id) setSelectedId(null);
  }
  function patchItem(id: string, patch: Partial<Szenario>) {
    setItems(list => list.map(x => x.id === id ? { ...x, ...patch } : x));
  }

  const chartCashflow = rows.map(r => ({ name: r.name, CF: r.cashflowMonat }));
  const chartValueVsPrice = rows.map(r => {
    const base = items.find(x => x.id === r.id)!;
    return { name: r.name, Preis: Math.round(base.kaufpreis), Wert: r.wertAusCap };
  });

  return (
    <div className="bg-gradient-to-b from-slate-50 to-white min-h-screen">
      {/* Header */}
      <div className="max-w-5xl mx-auto px-4 pt-6">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="h-10 w-10 rounded-xl bg-gradient-to-br from-indigo-500 to-violet-500 text-white grid place-items-center shadow">
              <Scale className="h-5 w-5" />
            </div>
            <div>
              <h2 className="text-xl font-semibold tracking-tight">Vergleich</h2>
              <p className="text-muted-foreground text-sm">Mehrere Deals nebeneinander – Score, Cashflow, Wert vs. Preis.</p>
            </div>
          </div>

          <div className="flex items-center gap-2">
            <button
              className="px-3 py-2 rounded-lg text-sm inline-flex items-center gap-2 bg-card/80 border shadow-soft hover:shadow transition"
              onClick={() => setItems(demoItems())}
            >
              <RefreshCw className="h-4 w-4" /> Beispiel
            </button>
            <button
              className="px-3 py-2 rounded-lg text-sm inline-flex items-center gap-2 bg-card/80 border shadow-soft hover:shadow transition"
              onClick={exportCSV}
              title="CSV mit KPI-Vergleich herunterladen"
            >
              <FileText className="h-4 w-4" /> CSV
            </button>
            <button
              className="px-3 py-2 rounded-lg text-sm inline-flex items-center gap-2 bg-card/80 border shadow-soft hover:shadow transition"
              onClick={exportPDF}
              title="PDF (mehrseitig) exportieren"
            >
              <FileText className="h-4 w-4" /> PDF
            </button>
            <button
              className="px-3 py-2 rounded-lg text-sm inline-flex items-center gap-2 bg-card/80 border shadow-soft hover:shadow transition"
              onClick={exportJson}
            >
              <Download className="h-4 w-4" /> Export
            </button>
            <label className="px-3 py-2 rounded-lg text-sm inline-flex items-center gap-2 bg-card/80 border shadow-soft hover:shadow transition cursor-pointer">
              <Upload className="h-4 w-4" /> Import
              <input type="file" className="hidden" accept="application/json" onChange={(e) => { const f = e.target.files?.[0]; if (f) importJson(f); }} />
            </label>
          </div>
        </div>
      </div>

      {/* Inhalt für PDF – alles in diesen Wrapper */}
      <div ref={printRef} className="max-w-5xl mx-auto px-4 py-6 space-y-6 pb-28">
        {/* Szenarien-Liste */}
        <div className="rounded-2xl p-[1px] bg-gradient-to-br from-violet-200/60 via-sky-200/50 to-emerald-200/60">
          <div className="rounded-2xl bg-card p-5 space-y-5 shadow-soft">
            <div className="flex items-center justify-between">
              <div className="text-sm font-medium">Szenarien</div>
              <button
                className="text-sm inline-flex items-center gap-2 px-3 py-1.5 rounded-lg border bg-card hover:bg-surface"
                onClick={addItem}
              >
                <Plus className="h-4 w-4" /> hinzufügen
              </button>
            </div>

            <div className="grid grid-cols-1 gap-3">
              {items.map((s) => {
                const v = rows.find(r => r.id === s.id)!;
                const active = selectedId === s.id;
                return (
                  <div key={s.id} className={"rounded-xl border p-3 " + (active ? "ring-2 ring-indigo-400" : "")}>
                    <div className="flex items-start justify-between gap-3">
                      <div className="flex-1">
                        <div className="flex items-center gap-2">
                          <span className="inline-flex items-center px-2 py-1 rounded-full text-[11px] border" style={{ background: s.color + "20", color: "#111", borderColor: s.color + "66" }}>{s.typ}</span>
                          <input
                            className="px-2 py-1 rounded-lg border bg-card text-sm"
                            value={s.name}
                            onChange={(e) => patchItem(s.id, { name: e.target.value })}
                          />
                        </div>

                        {/* Eingaben */}
                        <div className="mt-3 grid sm:grid-cols-3 gap-3">
                          <NumberField label="Kaufpreis (€)" value={s.kaufpreis} onChange={(n) => patchItem(s.id, { kaufpreis: n })} />
                          <NumberField label="Fläche (m²)" value={s.flaecheM2} onChange={(n) => patchItem(s.id, { flaecheM2: n })} />
                          <NumberField label="Miete (€/m²/Monat)" value={s.mieteProM2Monat} step={0.1} onChange={(n) => patchItem(s.id, { mieteProM2Monat: n })} />
                          <PercentField label="Leerstand (%)" value={s.leerstandPct} onChange={(x) => patchItem(s.id, { leerstandPct: x })} />
                          <PercentField label="Opex auf Brutto (%)" value={s.opexPctBrutto} onChange={(x) => patchItem(s.id, { opexPctBrutto: x })} />
                          <div className="rounded-lg border p-2">
                            <div className="text-xs text-foreground flex items-center gap-2">
                              <input type="checkbox" checked={s.financingOn} onChange={(e) => patchItem(s.id, { financingOn: e.target.checked })} />
                              Finanzierung
                            </div>
                            <AnimatePresence initial={false}>
                              {s.financingOn && (
                                <motion.div initial={{ opacity: 0, y: -4 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -4 }} className="grid grid-cols-1 gap-2 mt-2">
                                  <PercentField label="LTV (%)" value={s.ltvPct} onChange={(x) => patchItem(s.id, { ltvPct: x })} step={0.001} />
                                  <div className="grid grid-cols-2 gap-2">
                                    <PercentField label="Zins p.a." value={s.zinsPct} onChange={(x) => patchItem(s.id, { zinsPct: x })} step={0.001} />
                                    <PercentField label="Tilgung p.a." value={s.tilgungPct} onChange={(x) => patchItem(s.id, { tilgungPct: x })} step={0.001} />
                                  </div>
                                </motion.div>
                              )}
                            </AnimatePresence>
                          </div>
                          <PercentField label="Cap Rate (%)" value={s.capRateAssumed} onChange={(x) => patchItem(s.id, { capRateAssumed: x })} step={0.0005} />
                          <div className="grid sm:grid-cols-3 gap-2">
                            <Kpi mini label="NOI-Yield" value={pct(v.noiYield)} icon={<Gauge className="h-3.5 w-3.5" />} />
                            <Kpi mini label="CF mtl." value={eur(v.cashflowMonat)} icon={<Banknote className="h-3.5 w-3.5" />} />
                            <Kpi mini label="DSCR" value={v.dscr ?? "–"} icon={<TrendingUp className="h-3.5 w-3.5" />} />
                          </div>
                        </div>
                      </div>

                      {/* Actions + Score */}
                      <div className="w-48 shrink-0">
                        <ScoreCardSmall score={v.score} label={v.scoreLabel} />
                        <div className="mt-2 grid grid-cols-2 gap-2">
                          <button className="h-9 inline-flex items-center justify-center rounded-lg border bg-card hover:bg-surface" onClick={() => setSelectedId(s.id)} title="Hervorheben/Markieren">
                            <Target className="h-4 w-4" />
                          </button>
                          <button className="h-9 inline-flex items-center justify-center rounded-lg border bg-card hover:bg-surface" onClick={() => cloneItem(s.id)} title="Duplizieren">
                            <Copy className="h-4 w-4" />
                          </button>
                          <button className="h-9 inline-flex items-center justify-center rounded-lg border bg-card hover:bg-surface col-span-2 text-rose-600" onClick={() => deleteItem(s.id)} title="Löschen">
                            <Trash2 className="h-4 w-4" />
                          </button>
                        </div>
                      </div>
                    </div>

                    {/* Wert vs Preis Mini-Zeile */}
                    <div className="mt-3 rounded-lg border bg-surface p-2 text-xs text-muted-foreground flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <LineIcon className="h-4 w-4" />
                        <span>Wert (NOI/Cap): <b>{eur(rows.find(r => r.id === s.id)!.wertAusCap)}</b></span>
                        <span className="text-gray-400">|</span>
                        <span>Kaufpreis: <b>{eur(s.kaufpreis)}</b></span>
                      </div>
                      <span className={"px-2 py-1 rounded-full border " + (v.valueGap >= 0 ? "bg-green-50 text-green-700 border-green-200" : "bg-amber-50 text-amber-700 border-amber-200")}>
                        {v.valueGap >= 0 ? "Unter Wert" : "Über Wert"} · {eur(Math.abs(v.valueGap))}
                      </span>
                    </div>
                  </div>
                );
              })}
              {items.length === 0 && <p className="text-xs text-muted-foreground">Noch keine Szenarien. Füge eines hinzu.</p>}
            </div>
          </div>
        </div>

        {/* Charts */}
        <section className="grid lg:grid-cols-2 gap-4">
          <div className="rounded-2xl border p-4 bg-card shadow-soft">
            <div className="text-sm font-medium mb-2">Cashflow (monatlich) – Ranking</div>
            <div className="h-64">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart data={chartCashflow} margin={{ top: 16, right: 16, left: 0, bottom: 8 }}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="name" />
                  <YAxis />
                  <RTooltip formatter={(v: any) => eur(v)} />
                  <Legend />
                  <Bar dataKey="CF" fill="#0ea5e9" radius={[8, 8, 0, 0]}>
                    <LabelList dataKey="CF" position="top" formatter={(v: any) => eur(v)} />
                  </Bar>
                </BarChart>
              </ResponsiveContainer>
            </div>
            <p className="text-xs text-muted-foreground mt-2">Positiver CF ist komfortabel; negativer CF erfordert Puffer oder Optimierungen.</p>
          </div>

          <div className="rounded-2xl border p-4 bg-card shadow-soft">
            <div className="text-sm font-medium mb-2">Wert (NOI/Cap) vs. Kaufpreis</div>
            <div className="h-64">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart data={chartValueVsPrice} margin={{ top: 16, right: 16, left: 0, bottom: 8 }}>
                  <defs>
                    <linearGradient id="gradPreis" x1="0" y1="0" x2="0" y2="1">
                      <stop offset="0%" stopColor="#111827" /><stop offset="100%" stopColor="#374151" />
                    </linearGradient>
                    <linearGradient id="gradWert" x1="0" y1="0" x2="0" y2="1">
                      <stop offset="0%" stopColor="#10b981" /><stop offset="100%" stopColor="#34d399" />
                    </linearGradient>
                  </defs>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="name" />
                  <YAxis />
                  <RTooltip formatter={(v: any) => eur(v)} />
                  <Legend />
                  <Bar dataKey="Preis" fill="url(#gradPreis)" radius={[8, 8, 0, 0]}>
                    <LabelList dataKey="Preis" position="top" formatter={(v: any) => eur(v)} />
                  </Bar>
                  <Bar dataKey="Wert" fill="url(#gradWert)" radius={[8, 8, 0, 0]}>
                    <LabelList dataKey="Wert" position="top" formatter={(v: any) => eur(v)} />
                  </Bar>
                </BarChart>
              </ResponsiveContainer>
            </div>
            <p className="text-xs text-muted-foreground mt-2">Liegt der Modell-Wert unter dem Kaufpreis, brauchst du gute Gründe (Lage, Potenziale) – sonst nachverhandeln.</p>
          </div>
        </section>
      </div>

      {/* Sticky Bottom – Top Szenario */}
      <div className="fixed bottom-0 left-0 right-0 z-20 border-t bg-card/90 backdrop-blur">
        <div className="max-w-5xl mx-auto px-4 py-3">
          {best ? (
            <div className="flex flex-wrap items-center justify-between gap-3">
              <div className="flex items-center gap-2">
                <div
                  className="h-8 w-8 rounded-lg shadow"
                  style={{ background: best.color }}
                  title={best.typ}
                />
                <div>
                  <div className="text-sm font-medium flex items-center gap-2">
                    <span>{best.name}</span>
                    <span className="inline-flex items-center gap-1.5 px-2 py-0.5 rounded-full border text-[11px] bg-card">
                      <Stars className="h-3.5 w-3.5" /> Top
                    </span>
                  </div>
                  <div className="text-xs text-muted-foreground flex items-center gap-2">
                    <span>Score:</span>
                    <ScoreDots score={best.score} label={best.scoreLabel} />
                  </div>
                </div>
              </div>

              <div className="grid grid-cols-3 gap-3 text-sm">
                <Badge icon={<Gauge className="h-3.5 w-3.5" />} text={`NOI-Yield ${pct(best.noiYield)}`} />
                <Badge icon={<Banknote className="h-3.5 w-3.5" />} text={`CF mtl. ${eur(best.cashflowMonat)}`} />
                <Badge icon={<TrendingUp className="h-3.5 w-3.5" />} text={`DSCR ${best.dscr ?? "–"}`} />
              </div>

              <div className="flex items-center gap-2 text-xs">
                <Info className="h-4 w-4 text-gray-400" />
                <span>Wert {eur(best.wertAusCap)} · Gap {best.valueGap >= 0 ? "Unter Wert" : "Über Wert"} {eur(Math.abs(best.valueGap))}</span>
              </div>
            </div>
          ) : (
            <div className="text-sm text-muted-foreground">Füge mindestens ein Szenario hinzu.</div>
          )}
        </div>
      </div>
    </div>
  );
}

/* ===================== Kleine UI-Bausteine ===================== */

function NumberField({
  label, value, onChange, step = 1
}: { label: string; value: number; onChange: (n: number) => void; step?: number }) {
  return (
    <label className="text-sm grid gap-1">
      <span className="text-foreground">{label}</span>
      <input
        className="w-full rounded-xl border px-3 py-2"
        type="number"
        step={step}
        value={Number.isFinite(value) ? value : 0}
        onChange={(e) => onChange(e.target.value === "" ? 0 : Number(e.target.value))}
      />
    </label>
  );
}

function PercentField({
  label, value, onChange, step = 0.005
}: { label: string; value: number; onChange: (n: number) => void; step?: number }) {
  return (
    <label className="text-sm grid gap-1">
      <span className="text-foreground">{label}</span>
      <div className="flex items-center gap-3">
        <input
          type="range"
          min={0}
          max={0.95}
          step={step}
          value={value}
          onChange={(e) => onChange(Number(e.target.value))}
          className="w-full"
        />
        <span className="w-24 text-right tabular-nums">{pct(value)}</span>
      </div>
    </label>
  );
}

function Kpi({ label, value, icon, mini = false }: { label: string; value: React.ReactNode; icon?: React.ReactNode; mini?: boolean }) {
  return (
    <div className={"rounded-xl border p-3 " + (mini ? "bg-surface" : "bg-card shadow-soft")}>
      <div className="text-xs text-muted-foreground flex items-center gap-1">{icon}{label}</div>
      <div className="mt-1 text-lg font-semibold tabular-nums">{value}</div>
    </div>
  );
}

function Badge({ icon, text }: { icon: React.ReactNode; text: string }) {
  return <span className="inline-flex items-center gap-1.5 px-2 py-1 rounded-full border text-[11px] text-foreground bg-card">{icon}{text}</span>;
}

function ScoreCardSmall({ score, label }: { score: number; label: "BUY" | "CHECK" | "NO" }) {
  const pctVal = Math.round(score * 100);
  const color = label === "BUY" ? "#16a34a" : label === "CHECK" ? "#f59e0b" : "#ef4444";
  return (
    <div className="rounded-xl border p-2 bg-card shadow-soft">
      <div className="text-[11px] text-muted-foreground mb-1">Score</div>
      <div className="flex items-center gap-2">
        <div className="relative h-10 w-10">
          <svg viewBox="0 0 36 36" className="absolute inset-0">
            <circle cx="18" cy="18" r="15.5" stroke="#e5e7eb" strokeWidth="5" fill="none" />
            <circle
              cx="18" cy="18" r="15.5" stroke={color} strokeWidth="5" fill="none"
              strokeDasharray={`${(pctVal/100)*2*Math.PI*15.5} ${2*Math.PI*15.5}`}
              transform="rotate(-90 18 18)"
              strokeLinecap="round"
            />
          </svg>
        </div>
        <div>
          <div className="text-lg font-semibold" style={{ color }}>{pctVal}%</div>
          <div className="text-[11px] text-muted-foreground">„{label}“</div>
        </div>
      </div>
    </div>
  );
}

function ScoreDots({ score, label }: { score: number; label: "BUY" | "CHECK" | "NO" }) {
  const filled = Math.round(score * 5);
  return (
    <div className="inline-flex items-center gap-1">
      {Array.from({ length: 5 }).map((_, i) => (
        <span key={i} className={"h-2.5 w-2.5 rounded-full " + (i < filled ? (label === "BUY" ? "bg-emerald-500" : label === "CHECK" ? "bg-amber-500" : "bg-rose-500") : "bg-gray-300")} />
      ))}
      <span className="ml-1 text-muted-foreground">{labelText(label)}</span>
    </div>
  );
}

/* ======================= Demo & Normalizer ===================== */

function demoItems(): Szenario[] {
  return [
    {
      id: uid(), name: "ETW – Cityrand", typ: "ETW", color: "#60a5fa",
      kaufpreis: 320000, flaecheM2: 68, mieteProM2Monat: 12.5,
      leerstandPct: 0.06, opexPctBrutto: 0.24,
      financingOn: true, ltvPct: 0.8, zinsPct: 0.039, tilgungPct: 0.02,
      capRateAssumed: 0.055
    },
    {
      id: uid(), name: "MFH – solider Cashflow", typ: "MFH", color: "#34d399",
      kaufpreis: 1200000, flaecheM2: 165, mieteProM2Monat: 12.1,
      leerstandPct: 0.05, opexPctBrutto: 0.18,
      financingOn: true, ltvPct: 0.8, zinsPct: 0.039, tilgungPct: 0.02,
      capRateAssumed: 0.057
    },
    {
      id: uid(), name: "Gewerbe – Büro 2 Zonen", typ: "GEWERBE", color: "#f59e0b",
      kaufpreis: 1500000, flaecheM2: 600, mieteProM2Monat: 15,
      leerstandPct: 0.08, opexPctBrutto: 0.26,
      financingOn: true, ltvPct: 0.65, zinsPct: 0.043, tilgungPct: 0.02,
      capRateAssumed: 0.065
    }
  ];
}

function normalizeSzenario(x: any): Szenario {
  return {
    id: String(x.id ?? uid()),
    name: String(x.name ?? "Szenario"),
    typ: (x.typ as SzenarioTyp) ?? "ETW",
    color: String(x.color ?? pickColor(Math.floor(Math.random() * 6) + 1)),
    kaufpreis: num(x.kaufpreis, 300000),
    flaecheM2: num(x.flaecheM2, 70),
    mieteProM2Monat: num(x.mieteProM2Monat, 12),
    leerstandPct: clamp01(num(x.leerstandPct, 0.05)),
    opexPctBrutto: clamp01(num(x.opexPctBrutto, 0.25)),
    financingOn: Boolean(x.financingOn ?? true),
    ltvPct: clamp01(num(x.ltvPct, 0.8)),
    zinsPct: clamp01(num(x.zinsPct, 0.04)),
    tilgungPct: clamp01(num(x.tilgungPct, 0.02)),
    capRateAssumed: clamp01(num(x.capRateAssumed, 0.055)),
  };
}
function num(v: any, fb: number) { const n = Number(v); return Number.isFinite(n) ? n : fb; }
function num0(v: number) { return Number.isFinite(v) ? String(Math.round(v)).replace(".", ",") : ""; }
function numDec(v: number, d: number) {
  if (!Number.isFinite(v)) return "";
  const s = v.toFixed(d);
  return s.replace(".", ",");
}
function safe(s: string) {
  return `"${String(s).replace(/"/g, '""')}"`;
}
function pickColor(i: number) {
  const palette = ["#60a5fa", "#34d399", "#f59e0b", "#f472b6", "#a78bfa", "#fb7185"];
  return palette[(i - 1) % palette.length];
}
